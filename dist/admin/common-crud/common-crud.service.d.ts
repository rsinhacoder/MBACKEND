import { Repository } from "typeorm";
import { moleculus_sip as SIPEntity, moleculus_sip_transactions as SIPTransactionsEntity, moleculus_states as StateEntity } from "../../modules/entities";
import { moleculus_pages as PagesEntity } from "../../modules/entities/pages.entity";
import { moleculus_settings as SettingsEntity } from "../../modules/entities/settings.entity";
import { moleculus_user_notification as UserNotificationEntity } from "../../modules/entities/userNotification.entity";
import { UpdateSettingsDto } from "../dtos/UpdateSetting.dto";
import { UpdateUserByAdminDto } from "../dtos/UpdateUserByAdminDto";
import { moleculus_countries as CountriesEntity, moleculus_index_tokens as IndexTokenEntity, moleculus_user_address as AddressEntity, moleculus_user_kyc as KycEntity } from "./../../modules/entities";
import { moleculus_email_template as EmailTemplateEntity } from "./../../modules/entities/email-template.entity";
import { moleculus_login_log as LoginLogEntity } from "./../../modules/entities/loginLog.entity";
import { moleculus_user as UserEntity } from "./../../modules/entities/user.entity";
export declare class CommonCrudService {
    private readonly indexTokenRepository;
    private readonly notificationRepository;
    private readonly countryRepository;
    private readonly addressRpository;
    private readonly loginLogRepository;
    private readonly sipRepository;
    private readonly sipTransactionsRepository;
    private readonly pagesRepository;
    private readonly settingsRepository;
    private readonly userRepository;
    private readonly emailTemplateEntity;
    private readonly stateRepository;
    private readonly kycRepository;
    constructor(indexTokenRepository: Repository<IndexTokenEntity>, notificationRepository: Repository<UserNotificationEntity>, countryRepository: Repository<CountriesEntity>, addressRpository: Repository<AddressEntity>, loginLogRepository: Repository<LoginLogEntity>, sipRepository: Repository<SIPEntity>, sipTransactionsRepository: Repository<SIPTransactionsEntity>, pagesRepository: Repository<PagesEntity>, settingsRepository: Repository<SettingsEntity>, userRepository: Repository<UserEntity>, emailTemplateEntity: Repository<EmailTemplateEntity>, stateRepository: Repository<StateEntity>, kycRepository: Repository<KycEntity>);
    changeUserDeleteStatus(user_id: number): Promise<UserEntity>;
    getUserKycDetails(user_id: number): Promise<KycEntity>;
    getStateList(): Promise<StateEntity[]>;
    getCountryList(): Promise<CountriesEntity[]>;
    changeUserStatus(user_id: number): Promise<UserEntity>;
    getSipOfaUserByTokenCode(token_code: string, user_id: any): Promise<SIPTransactionsEntity[]>;
    getUserSips(user_id: number): Promise<SIPEntity[]>;
    getNotifications(user_id: number): Promise<UserNotificationEntity>;
    getCountOfRepositoryEntries2(): Promise<{
        pageresult: number;
        settingresult: number;
        emailresult: number;
        totalusersresultindia: number;
        enableuserresultIndia: number;
        disableuserresultindia: number;
        totalusersresultusa: number;
        enableuserresultusa: number;
        disableuserresultusa: number;
        disableuserresult: number;
        tokenresult: number;
        totalusersresult: number;
    }>;
    getById(id: number, repository: string): Promise<any>;
    getAddressDetails(id: number): Promise<AddressEntity>;
    getAllUsers(): Promise<UserEntity[]>;
    getUserDetailsById(id: number): Promise<any>;
    updateUserById(id: number, data: UpdateUserByAdminDto): Promise<true | UserEntity>;
    updateSettingsById(id: number, updateSettingDto: UpdateSettingsDto): Promise<true | SettingsEntity>;
    getEnabledUsers(): Promise<number>;
    getDisabledUsers(): Promise<number>;
    getAll(repository: string): Promise<any>;
    getRepoContent(repository: string): Promise<any>;
    updateStatus(id: number, repository: string): Promise<any>;
    deleteSoft(id: number, repository: string): Promise<any>;
    getCountOfRepositoryEntries(repository: string): Promise<any>;
}
