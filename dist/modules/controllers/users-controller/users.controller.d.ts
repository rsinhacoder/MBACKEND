import { Request as RequestEx, Response } from "express";
import { FillSignUpFormDto } from "src/modules/dto/FillSignupForm.dto";
import { UpdateAddressDto } from "src/modules/dto/UpdateAddress.dto";
import { UpdatePhoneNumberDto } from "src/modules/dto/UpdatePhoneNumber.dto";
import { UpdateProfileDto } from "src/modules/dto/UpdateProfile.dto";
import { Repository } from "typeorm";
import { UserNotificationsService } from "../../../modules/controllers/user-noti-controller/user-notifications.service";
import { CreateUserDto } from "../../dto/Create-user.dto";
import { UpdateUserDto } from "../../dto/Update-user.dto";
import { MailService } from "src/utils/mail/mail.service";
import { moleculus_email_template as EmailEntity, moleculus_index_tokens as IndexTokensEntity } from "../../entities";
import { moleculus_sip_transactions as SIPTransactionsEntity } from "../../entities/siptransactions.entity";
import { moleculus_user as UserEntity } from "../../entities/user.entity";
import { moleculus_user_kyc as KYCEntity } from "../../entities/userKYC.entity";
import { UsersService } from "./users.service";
export declare class UsersController {
    private readonly indexTokenRepository;
    private readonly userRepository;
    private readonly sipTransactionsRepository;
    private readonly kycRepository;
    private readonly emailRepository;
    private readonly usersService;
    private readonly mailService;
    private readonly userNotificationsService;
    constructor(indexTokenRepository: Repository<IndexTokensEntity>, userRepository: Repository<UserEntity>, sipTransactionsRepository: Repository<SIPTransactionsEntity>, kycRepository: Repository<KYCEntity>, emailRepository: Repository<EmailEntity>, usersService: UsersService, mailService: MailService, userNotificationsService: UserNotificationsService);
    test2(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    confirmpayment(res: Response): Promise<Response<any, Record<string, any>>>;
    paytmSignatureGeneration(res: Response, req_body: any): Promise<Response<any, Record<string, any>>>;
    testUserQuery(res: Response): Promise<Response<any, Record<string, any>>>;
    getSIPByTokenCode(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    getKycDetails(req: RequestEx, res: Response): Promise<Response<any, Record<string, any>>>;
    getUserDetails(req: RequestEx, res: Response): Promise<Response<any, Record<string, any>>>;
    getIndexTokens(res: Response): Promise<Response<any, Record<string, any>>>;
    getIndexTokensuser(res: Response): Promise<Response<any, Record<string, any>>>;
    create(createUserDto: CreateUserDto): string;
    registerUser(createUserDto: CreateUserDto, res: Response): Promise<Response<any, Record<string, any>>>;
    getStates(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    getCountries(res: Response): Promise<Response<any, Record<string, any>>>;
    sendOTP(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    resendOTP(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    softDeleteAccount(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    updateKYCDetails(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    sendKYCResponse(res: Response, sendKYCResponse: any): Promise<Response<any, Record<string, any>>>;
    getUserKYCDetails(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    verifyOTP(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    verifyTFA(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    verifyEmailChange(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    findAll(): string;
    getNotification(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    findOne(id: string): Promise<UserEntity>;
    update(id: string, updateUserDto: UpdateUserDto): string;
    updateProfile(res: Response, updateProfileDto: UpdateProfileDto): Promise<Response<any, Record<string, any>>>;
    checkDocument(document_type_: string, document_value: string, user_id: number): Promise<boolean>;
    updateUser(updateUserDto: UpdateUserDto, res: Response): Promise<Response<any, Record<string, any>>>;
    verifyUserDocument(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    getCaptcha(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    enterAadhaar(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    enterOtp(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    fetchKyc(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    fillSignUpForm(fillSignUpFormDto: FillSignUpFormDto, res: Response): Promise<Response<any, Record<string, any>>>;
    updatePhoneNumber(updatePhoneNumberDto: UpdatePhoneNumberDto, res: Response): Promise<Response<any, Record<string, any>>>;
    deleteUserByEmail(body: any, res: Response): Promise<Response<any, Record<string, any>>>;
    updateAddress(updateAddressDto: UpdateAddressDto, req: RequestEx, res: Response): Promise<Response<any, Record<string, any>>>;
    updateEmail(body: any, res: Response): Promise<Response<any, Record<string, any>>>;
    changePassword(body: any, res: Response): Promise<Response<any, Record<string, any>>>;
    resetPassword(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    updateTfa(Body: any, res: Response): Promise<Response<any, Record<string, any>>>;
    getGraphData(res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    remove(id: string): string;
}
