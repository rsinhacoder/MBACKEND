import { FillSignUpFormDto } from "src/modules/dto/FillSignupForm.dto";
import { UpdateAddressDto } from "src/modules/dto/UpdateAddress.dto";
import { UpdateProfileDto } from "src/modules/dto/UpdateProfile.dto";
import { MailService } from "src/utils/mail/mail.service";
import { Repository } from "typeorm";
import { SMSService } from "../../../utils/sms/sms.service";
import { CreateUserDto } from "../../dto/Create-user.dto";
import { UpdateUserDto } from "../../dto/Update-user.dto";
import { moleculus_countries as CountryEntity } from "../../entities/countries.entity";
import { moleculus_states as StateEntity } from "../../entities/states.entity";
import { moleculus_sip as SIPEntity, moleculus_user_address as AddressEntity, moleculus_user_kyc as KYCEntity, moleculus_user_notification as NotificationsEntity } from "../../entities";
import { moleculus_user as User, moleculus_user as UserEntity } from "../../entities/user.entity";
export declare class UsersService {
    private readonly userRepository;
    private readonly addressRepository;
    private readonly sipRepository;
    private readonly kycRepository;
    private readonly stateRepository;
    private readonly countryRepository;
    private readonly notificationRepository;
    private readonly smsService;
    private readonly mailService;
    constructor(userRepository: Repository<UserEntity>, addressRepository: Repository<AddressEntity>, sipRepository: Repository<SIPEntity>, kycRepository: Repository<KYCEntity>, stateRepository: Repository<StateEntity>, countryRepository: Repository<CountryEntity>, notificationRepository: Repository<NotificationsEntity>, smsService: SMSService, mailService: MailService);
    create(_createUserDto: CreateUserDto): string;
    createsha256(text: string): Promise<any>;
    verifyUserDocumentPAN(_legal_name: string, user_email: string, document_type: string, document_value: string): Promise<any>;
    checkPanValidity(pan_number: string, user_email: string, legal_name: string): Promise<boolean>;
    checkAadhaarValidity(document_value: string, user_email: string): Promise<boolean>;
    checkDocument(document_type: any, document_value: any, user_id: any): Promise<boolean>;
    getCaptcha(user_email: string): Promise<any>;
    enterAadhaar(uuid: string, aadhaar: string, captcha: string, request_id: string, user_email: string): Promise<any>;
    enterOtp(uuid: string, otp: string, _request_id: string, user_email: string): Promise<any>;
    fetchKyc(uuid: string, user_email: string): Promise<any>;
    getUserSips(user_id: number): Promise<SIPEntity[]>;
    forceDeleteUser(email_id: string): Promise<boolean>;
    sendKYCResponse(user_id: number, token: string, kyc_response: string): Promise<KYCEntity>;
    updateKYCDetails(user_id: number, token: string, vendor_id: string, isAgain: number, api_response: string): Promise<KYCEntity>;
    getUserKYCDetails(user_id: number): Promise<KYCEntity>;
    getCountries(): Promise<CountryEntity[]>;
    getStatesUSA(): Promise<StateEntity[]>;
    getStatesINDIA(): Promise<StateEntity[]>;
    getUserDetailsById(user_id: number): Promise<User>;
    findUserByEmail(email_id: string): Promise<User>;
    findPhoneNumber(phone_number: string): Promise<User>;
    updatePhoneNumber(user_id: number, phone_number: string): Promise<User>;
    generateRandomString(): Promise<string>;
    registerUser(createuserDto: CreateUserDto): Promise<any>;
    createAddress(user_id: number): Promise<AddressEntity>;
    updateAddress(id: number, updateAddressDto: UpdateAddressDto): Promise<AddressEntity>;
    updateProfile(id: number, updateProfileDto: UpdateProfileDto): Promise<User>;
    updatePassword(id: number, newPassword: string): Promise<User>;
    sendOTP(phone_number: string, otp: string): Promise<{
        statusCode: number;
        otp: string;
        message: any;
    }>;
    fillSignUpForm(fillSignUpFormDto: FillSignUpFormDto, user_id: number): Promise<User>;
    verifyOTP(email_id: string, given_otp: string): Promise<boolean>;
    verifyNewEmailOTP(user_id: string, given_otp: string, new_email_id: string): Promise<boolean>;
    updateTfa(user_id: string): Promise<User>;
    changePassword(user_id: any, old_password: any, new_password: any): Promise<boolean | User>;
    findAll(): string;
    verifyTFA(token: string, user_id: number): Promise<boolean>;
    findOne(id: number): Promise<User>;
    update(id: number, _updateUserDto: UpdateUserDto): string;
    updateUser(updateUserDto: UpdateUserDto, user_id: number): Promise<User>;
    updateEmail(user_id: number, new_email_id: string): Promise<false | {
        statusCode: number;
        message: string;
    }>;
    remove(id: number): string;
    deleteAccount(user_id: number): Promise<boolean>;
}
export default UsersService;
